Sudoku Background
# Sudoku is a game played on a 9x9 grid. The goal of the game is to fill all cells of the grid with digits from 1 to 9, so that each column, each row, and each of the nine 3x3 sub-grids (also known as blocks) contain all of the digits from 1 to 9.
# (More info at: http://en.wikipedia.org/wiki/Sudoku)

# Sudoku Solution Validator
# Write a function validSolution/ValidateSolution/valid_solution() that accepts a 2D array representing a Sudoku board, and returns true if it is a valid solution, or false otherwise. The cells of the sudoku board may also contain 0's, which will represent empty cells. Boards containing one or more zeroes are considered to be invalid solutions.

# The board is always 9 cells by 9 cells, and every cell only contains integers from 0 to 9.



def valid_solution(board):
    poz = 0
    ok = True #if true test is ok
    pion = 0

    while ok == True:
        if sum(map(sum, board)) != 405:
            ok = False
            break
        else:
            ok = True

        if ok == False:
            break

        if ok == True:
            for i in board:
                for j in i:
                    if j == 0:
                        ok = False
                        break

        if ok == False:
            break

        if ok == True: # chcecking sum in x position
            for i in board:
                for j in i:
                    if j == 0:
                        ok = False
                        break
                    poz = poz + j

                if poz != 45:
                    ok = False
                    break
                else: ok = True
                poz = 0

        if ok == False:
            break

        if ok == True: # chcecking sum in y position
            for a, b in enumerate(board):
                for g,c in enumerate(b):
                    pion = pion + board[g][a]
                if pion != 45:
                    ok = False
                    break
                else:
                    ok = True
                pion = 0

        if ok == False:
            break

        blocks = []  #chcek 9 of 3x3 bloks
        for i in range(0, 9, 3):
            for j in range(0, 9, 3):
                blocks.append(board[i][j:j+3] + board[i+1][j:j+3] + board[i+2][j:j+3])

            for i in blocks:
                for j in i:
                    if j == 0:
                        ok = False
                        break
                    poz = poz + j
                    if poz != 45:
                        ok = False
                    else: ok = True
                poz = 0

        break

    return ok
