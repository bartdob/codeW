Given an integer perimeter, 0 < p <= 1 000 000, find all right-angled triangles with perimeter p that have integral side lengths.

Your Task
Complete the integerRightTriangles (or integer_right_triangles) function.
Each element of the solution array should contain the integer side lengths of a valid triangle in increasing order.
Examples
integerRightTriangles(4);   // []
integerRightTriangles(12);  // [[3,4,5]]
integerRightTriangles(120); // [[20,48,52], [24,45,51], [30,40,50]]

==========================================
SOLUTION

import math

def integer_right_triangles(p):
    a=0
    c=0
    c1=0
    a1=0
    arr = []
    arr1 = []
    k = 0

    if p%2 != 0 and p <12 and p == None and p>0:
         arr = []
    elif p>=12 and p%2 == 0:
        for i in range(4, int(p/2)):
            a1 = (p/2)*((p-2*i))
            a = int(a1/(p-i))
            c1 = (pow(a, 2)) + (pow(i, 2))
            c = int(math.sqrt(c1))
            if p == a + i + c and a<i:
                tri = 0
                arr1.insert(0, a)
                arr1.insert(1, i)
                arr1.insert(2, c)

    arr = [arr1[z * 3:(z + 1) * 3] for z in range((len(arr1) + 3 -1) // 3)]
    return arr
